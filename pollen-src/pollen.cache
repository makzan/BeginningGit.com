((3) 0 () 12 ("git log" "language-bash" "I prepared a git repo with several commits. Please use " " to view the commits. Try exploring different flags to view the differences." "seamless" "Git log" "." "time-for-action" "#time-for-action" "Time for Action—" "Exercise 1" "Learn more") () (h ! (equal) ((p+ #"/home/ubuntu/workspace/pollen-src/git-log.html.pm" . unix) h ! (equal) (mod-time . 1431702833) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/git-log.html.pm")) (doc c root c (c h1 c (? . 5)) c (c p c "From time to time, you’ll want to check the commit logs. You may use " c (c code c (? . 0)) q " to check the log.") c (q p "There are different formats and filters you can apply to the log.") c (c h2 c (c (c id c (? . 7))) c (c a c (c (c href c (? . 8))) c (c string-append c (? . 9) q "Viewing log"))) c (q p "1. Go into any working project with git version controlled.") c (c p c "2. View the log with " c (c code c (? . 0)) c (? . 6)) c (c pre c (c code c (c (c class c (? . 1))) q "$ git log")) c (q p "3. Use " (code "--oneline") " to view the log in minimal mode. (One line with only comment).") c (c pre c (c code c (c (c class c (? . 1))) q "$ git log --oneline")) c (c h2 c (c (c id c (u . "exercise-1"))) c (c a c (c (c href c (u . "#exercise-1"))) c (? . 10))) c (c p c (? . 2) c (c code c (? . 0)) c (? . 3)) c (c p c (c iframe c (c (c seamless c (? . 4)) q (src "http://beginning-git-sandbox.herokuapp.com/?case=-git-log")))) c (c h2 c (c (c id c (u . "exercise-2"))) c (c a c (c (c href c (u . "#exercise-2"))) q "Exercise 2")) c (c p c (? . 2) c (c code c (? . 0)) c (? . 3)) c (c p c (c iframe c (c (c seamless c (? . 4)) q (src "http://beginning-git-sandbox.herokuapp.com/?case=3")))) c (c h2 c (c (c id c (u . "recourses"))) c (c a c (c (c href c (u . "#recourses"))) q "Recourses")) c (c p c "You may learn more on the official " c (c a c (q (href "http://git-scm.com/docs/git-log")) c (? . 5)) q " documentation."))) ((p+ #"/home/ubuntu/workspace/pollen-src/git-config.html.pm" . unix) h ! (equal) (mod-time . 1431701887) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/git-config.html.pm")) (doc c root c (q h1 "Git config") c (c p c "Before we commit changes, we need to tell the git client the author’s information. This usually mean setting the user name and email by using " c (q code "git config") c ". There are 3 levels of git configurations: " c (q em "local") c ", " c (q em "global") c " and " c (q em "system") c (? . 6)) c (q p "Config for current (local) git repo:") c (c pre c (c code c (c (c class c (? . 1))) q "$ git config user.email mak@makzan.net" (br) "$ git config user.name \"Thomas Mak\"")) c (q p "Config git globally:") c (c pre c (c code c (c (c class c (? . 1))) q "$ git config --global user.email mak@makzan.net" (br) "$ git config --global user.name \"Thomas Mak\"")))) ((p+ #"/home/ubuntu/workspace/pollen-src/git-branch.html.pm" . unix) h ! (equal) (mod-time . 1431702351) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/git-branch.html.pm")) (doc c root c (q h1 "Git branch") c (q p "It’s very easy to create branch in git. Git uses pointers to reference each commits and you may treat branch as simply as another pointer.") c (c pre c (c code c (c (c class c (? . 1))) q "$ git checkout -b feature_a")))) ((p+ #"/home/ubuntu/workspace/pollen-src/index.ptree" . unix) h ! (equal) (mod-time . 1431702633) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/index.ptree")) (doc q pagetree-root index.html git-init.html git-log.html git-checkout.html git-branch.html git-merge.html git-config.html more-on-git-add.html learn-more.html)) ((p+ #"/home/ubuntu/workspace/pollen-src/index.html.pm" . unix) h ! (equal) (mod-time . 1431675440) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/index.html.pm")) (doc q root (h1 "Beginning Git") (p "We are not trying to explain everything in Git. Instead, we focus only on how to get started using Git every day in your projects."))) ((p+ #"/home/ubuntu/workspace/pollen-src/git-checkout.html.pm" . unix) h ! (equal) (mod-time . 1431702411) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/git-checkout.html.pm")) (doc c root c (q h1 "Git checkout") c (q p "We have to be easy to jump between changes in order to be productivily working in a version controlled system. Git provides this kind of freedom. We can easily checkout different commits by using the `checkout` command.") c (c pre c (c code c (c (c class c (? . 1))) q "$ git checkout commit_hash")) c (c h2 c (c (c id c (? . 7))) c (c a c (c (c href c (? . 8))) c (c string-append c (? . 9) q "Checkout the histories and branches"))) c (q p "Assuming now we have a JavaScript project. We want to use branches to work on different features. This is to ensure each non-complete feature won’t affect the others.") c (q p "1.") c (c h2 c (c (c id c (u . "exercise-1"))) c (c a c (c (c href c (u . "#exercise-1"))) c (? . 10))) c (q p "I prepared a git repo with several commits. Please try to checkout commits.") c (c p c (c iframe c (c (c seamless c (? . 4)) q (src "http://beginning-git-sandbox.herokuapp.com/?case=-javascript-project")))))) ((p+ #"/home/ubuntu/workspace/pollen-src/git-init.html.pm" . unix) h ! (equal) (mod-time . 1431700292) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/git-init.html.pm")) (doc c root c (q h1 "Git init") c (q p "We want to get started our first git version control repo. It’s as simply as calling `git init` in the working directory.") c (q p "Then we can use `git status` at any moment to check the current tracking status. Usually, we would like to commit the files as initial commit.") c (c h2 c (c (c id c (? . 7))) c (c a c (c (c href c (? . 8))) c (c string-append c (? . 9) q "Init first git repo"))) c (q p "1. `cd` into your working project.") c (q p "2. Type `git init` to get started.") c (c pre c (c code c (c (c class c (? . 1))) q "$ git init")) c (q p "3. Check status:") c (q p "$ git status") c (q p "4. Add all files in current directory:") c (q p "$ git add .") c (q p "5. Commit the changes with message.") c (q p "$ git commit -m \"Init code with index.html\"") c (c h2 c (c (c id c (u . "exercise"))) c (c a c (c (c href c (u . "#exercise"))) q "Exercise")) c (q p "In the following sandbox environment, try to commit the first file into the git repo.") c (c p c (c iframe c (c (c seamless c (? . 4)) q (src "http://beginning-git-sandbox.herokuapp.com/?case=1")))))) ((p+ #"/home/ubuntu/workspace/pollen-src/git-merge.html.pm" . unix) h ! (equal) (mod-time . 1431702238) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/git-merge.html.pm")) (doc c root c (q h1 "Git merge") c (q p "After we used branch for specific feature development, we want to merge them into the master branch.") c (c h2 c (c (c id c (u . "exercise-1"))) c (c a c (c (c href c (u . "#exercise-1"))) c (? . 10))) c (q p "I prepared a git repo. Try to merge the feature branches into the master.") c (c p c (c iframe c (c (c seamless c (? . 4)) q (src "http://beginning-git-sandbox.herokuapp.com/?case=-git-merge")))))) ((p+ #"/home/ubuntu/workspace/pollen-src/learn-more.html.pm" . unix) h ! (equal) (mod-time . 1431677016) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/learn-more.html.pm")) (doc c root c (c h1 c (? . 11)) q (p "Where to learn more?") (p "http://git-scm.commit"))) ((p+ #"/home/ubuntu/workspace/pollen-src/more-on-git-add.html.pm" . unix) h ! (equal) (mod-time . 1431700140) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/more-on-git-add.html.pm")) (doc c root c (c h1 c (? . 11)) c (q p "To add deleted files in current directory:") c (c pre c (c code c (c (c class c (? . 1))) q "$ git add . --all")) c (q p "Why you want to add the deleted files into a commit? Because git knows if the file is just a rename or a deletion. It makes your history more accurate.") c (c h2 c (q (id "interactive-add")) c (c a c (c (c href c (u . "#interactive-add"))) q "Add files to stage in interactive mode")) c (c pre c (c code c (c (c class c (? . 1))) q "$ git add -i"))))))